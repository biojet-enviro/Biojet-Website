---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getLocaleFromUrl, useTranslations, type Locale } from '../i18n/translations';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  imageAlt?: string;
}

const locale = getLocaleFromUrl(Astro.url) as Locale;
const t = useTranslations(locale);

const { 
  title, 
  description = "Biojet designs and manufactures cutting-edge jet aerators for wastewater treatment industries worldwide.",
  image = "/assets/hero-bg.webp",
  imageAlt = "Biojet - Advanced Jet Aeration Systems"
} = Astro.props;

// Get full URL for social media
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const imageURL = new URL(image, Astro.site);
---

<!doctype html>
<html lang={locale}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={imageURL} />
    <meta property="og:image:alt" content={imageAlt} />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={imageURL} />
    <meta name="twitter:image:alt" content={imageAlt} />
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;800&display=swap" rel="stylesheet">
    {locale === 'th' && (
      <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai:wght@100;200;300;400;500;600;700&display=swap" rel="stylesheet">
    )}
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <!-- Cloudflare Web Analytics --><script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "b701ec3631ff4cb6873ab79fef00efb1"}'></script><!-- End Cloudflare Web Analytics -->
  </head>
  <body class={locale === 'th' ? 'lang-thai' : ''}>
    <Header locale={locale} />
    <main>
      <slot />
    </main>
    <Footer locale={locale} />
  </body>
</html>

<style is:global>
  /* ========================================
     Satoshi Font Family
     ======================================== */

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Light.woff2') format('woff2');
    font-weight: 300;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-LightItalic.woff2') format('woff2');
    font-weight: 300;
    font-style: italic;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Regular.woff2') format('woff2');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Italic.woff2') format('woff2');
    font-weight: 400;
    font-style: italic;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Medium.woff2') format('woff2');
    font-weight: 500;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-MediumItalic.woff2') format('woff2');
    font-weight: 500;
    font-style: italic;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Bold.woff2') format('woff2');
    font-weight: 700;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-BoldItalic.woff2') format('woff2');
    font-weight: 700;
    font-style: italic;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Black.woff2') format('woff2');
    font-weight: 900;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-BlackItalic.woff2') format('woff2');
    font-weight: 900;
    font-style: italic;
    font-display: swap;
  }

  /* ========================================
     CSS Reset & Base Styles
     ======================================== */

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  :root {
    /* Color Variables from Figma */
    --blue-01: #F4FBFC;
    --blue-02: #DDF4F7;
    --blue-03: #9CDFE7;
    --blue-04: #58C8D7;
    --blue-05: #1890AE;
    --blue-06: #175A78;
    --white: #FFFFFF;
    --lightgray: #E6E6E6;
    --darkgray: #121212;
    --golden: #F5E0AD;
    
    /* Typography */
    --font-primary: 'Satoshi', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', sans-serif;
    --font-mono: 'JetBrains Mono', 'Courier New', monospace;
    
    /* Spacing */
    --section-padding: 100px;
    --container-width: 1600px;
  }

  body {
    font-family: var(--font-primary);
    color: var(--blue-06);
    background-color: var(--white);
    line-height: 1.6;
    overflow-x: hidden;
  }

  /* Thai language font override */
  body.lang-thai {
    font-family: 'IBM Plex Sans Thai', var(--font-primary);
    line-height: 1.8; /* Increased line-height for Thai script readability */
  }

  body.lang-thai h1,
  body.lang-thai h2,
  body.lang-thai h3,
  body.lang-thai h4,
  body.lang-thai h5,
  body.lang-thai h6,
  body.lang-thai p,
  body.lang-thai a,
  body.lang-thai button,
  body.lang-thai span,
  body.lang-thai div,
  body.lang-thai li {
    font-family: 'IBM Plex Sans Thai', var(--font-primary);
  }

  /* Adjust font weight mapping for IBM Plex Sans Thai font */
  body.lang-thai .hero-title,
  body.lang-thai h1 {
    font-weight: 700; 
  }

  body.lang-thai h2,
  body.lang-thai h3 {
    font-weight: 500;  
  }

  body.lang-thai button {
    font-weight: 500;  
  }

  main {
    padding-top: 0px;
  }

  img {
    max-width: 100%;
    height: auto;
    display: block;
  }

  a {
    text-decoration: none;
    color: inherit;
  }

  button {
    border: none;
    background: none;
    cursor: pointer;
    font-family: inherit;
  }

  /* ========================================
     Utility Classes
     ======================================== */

  .section-title {
    font-size: 48px;
    font-weight: 700;
    line-height: 48px;
    color: var(--blue-06);
  }

  /* ========================================
     Responsive Design
     ======================================== */

  @media (max-width: 1440px) {
    :root {
      --section-padding: 80px;
    }
  }

  @media (max-width: 768px) {
    :root {
      --section-padding: 60px;
    }
  }

  /* ========================================
     Bubble Animation
     ======================================== */

  .bubble-animation {
    position: fixed;
    background-image: url('../assets/bubble.svg');
    background-size: contain;
    pointer-events: none;
    z-index: 999;
    will-change: transform, opacity;
    animation: bubbleAnimation 4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    animation-delay: var(--animation-delay, 0s);
  }

  /* Add a shiny highlight to the bubble */
  .bubble-animation::before {
    content: '';
    position: absolute;
    top: 15%;
    left: 15%;
    width: 40%;
    height: 40%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.6), transparent);
    border-radius: 50%;
  }

  /* Add a subtle inner glow */
  .bubble-animation::after {
    content: '';
    position: absolute;
    inset: 2px;
    border-radius: 50%;
    background: radial-gradient(circle at 35% 35%, rgba(255, 255, 255, 0.3), transparent 60%);
  }

  @keyframes bubbleAnimation {
    0% {
      transform: translate(0, 0) scale(0);
      opacity: 0;
    }
    
    /* Spurt phase - bubbles shoot out in random directions */
    0.1% {
      transform: translate(0, 0) scale(1);
      opacity: 1;
    }
    
    15% {
      transform: translate(var(--spurt-x), var(--spurt-y)) scale(1);
      opacity: 1;
    }

    70% {
      opacity: 1;
    }
    
    /* Float phase - bubbles start rising */
    100% {
      transform: translate(
        calc(var(--spurt-x) + var(--drift-x)), 
        calc(var(--spurt-y) - var(--float-distance))
      ) scale(0.8);
      opacity: 0;
    }
  }

  /* Ensure bubbles work well on mobile */
  @media (max-width: 768px) {
    .bubble-animation {
      animation-duration: 5s;
    }
  }
</style>

<script>
  // Bubble Animation System
  class BubbleAnimation {
    bubbleCount: number;

    constructor() {
      this.bubbleCount = 32; // Number of bubbles per click
      this.init();
    }

    init() {
      document.addEventListener('click', (e) => this.createBubbles(e));
    }

    createBubbles(e: MouseEvent) {
      const x = e.clientX;
      const y = e.clientY;

      for (let i = 0; i < this.bubbleCount; i++) {
        this.createBubble(x, y, i);
      }
    }

    createBubble(x: number, y: number, index: number) {
      const bubble = document.createElement('div');
      bubble.className = 'bubble-animation';
      
      // Random size between 10px and 25px
      const size = Math.random() * 15 + 10;
      bubble.style.width = `${size}px`;
      bubble.style.height = `${size}px`;
      
      // Random angle for initial spurt (0-360 degrees)
      const angle = (Math.random() * 360) * (Math.PI / 180);
      
      // Random distance for initial spurt (160-320px)
      const distance = Math.random() * 160 + 160;
      
      // Calculate spurt destination
      const spurtX = x + Math.cos(angle) * distance;
      const spurtY = y + Math.sin(angle) * distance;
      
      // Set initial position
      bubble.style.left = `${x}px`;
      bubble.style.top = `${y}px`;
      
      // Set CSS custom properties for animation
      bubble.style.setProperty('--spurt-x', `${spurtX - x}px`);
      bubble.style.setProperty('--spurt-y', `${spurtY - y}px`);
      bubble.style.setProperty('--float-distance', `${Math.random() * 300 + 500}px`);
      bubble.style.setProperty('--animation-delay', `${index * 0.01}s`);
      bubble.style.setProperty('--drift-x', `${(Math.random() - 0.5) * 100}px`);
      
      document.body.appendChild(bubble);
      
      // Remove bubble after animation completes
      setTimeout(() => {
        bubble.remove();
      }, 4000);
    }
  }

  // Initialize bubble animation when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new BubbleAnimation();
  });
</script>

